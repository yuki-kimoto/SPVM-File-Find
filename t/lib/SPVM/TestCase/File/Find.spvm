class TestCase::File::Find {
  use File::Find;
  use StringList;
  use Sort;
  use Array;
  
  static method test : int () {
    
    {
      my $dir = "lib";
      
      my $files_list = StringList->new;
      
      File::Find->find([$files_list : StringList] method : void ($dir : string, $file_base_name : string) {
        my $file = $dir;
        if ($file_base_name) {
          $file .= "/$file_base_name";
        }
        
        $files_list->push($file);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "lib",
        "lib/SPVM",
        "lib/SPVM/File",
        "lib/SPVM/File/Find",
        "lib/SPVM/File/Find.pm",
        "lib/SPVM/File/Find.spvm",
        "lib/SPVM/File/Find/Handler.pm",
        "lib/SPVM/File/Find/Handler.spvm"
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        return 0;
      }
    }
    
    {
      my $dir = "lib/";
      
      my $files_list = StringList->new;
      
      File::Find->find([$files_list : StringList] method : void ($dir : string, $file_base_name : string) {
        my $file = $dir;
        if ($file_base_name) {
          $file .= "/$file_base_name";
        }
        
        $files_list->push($file);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "lib",
        "lib/SPVM",
        "lib/SPVM/File",
        "lib/SPVM/File/Find",
        "lib/SPVM/File/Find.pm",
        "lib/SPVM/File/Find.spvm",
        "lib/SPVM/File/Find/Handler.pm",
        "lib/SPVM/File/Find/Handler.spvm"
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        return 0;
      }
    }
    return 1;
  }
}
