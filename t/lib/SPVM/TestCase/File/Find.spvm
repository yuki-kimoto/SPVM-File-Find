class TestCase::File::Find {
  use File::Find;
  use StringList;
  use Sort;
  use Array;
  use Sys::IO;
  use Cwd;
  
  static method test : int () {
    
    {
      my $dir = "t/test_files/lib";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files/lib",
        "t/test_files/lib/SPVM",
        "t/test_files/lib/SPVM/File",
        "t/test_files/lib/SPVM/File/Find",
        "t/test_files/lib/SPVM/File/Find.pm",
        "t/test_files/lib/SPVM/File/Find.spvm",
        "t/test_files/lib/SPVM/File/Find/Callback.pm",
        "t/test_files/lib/SPVM/File/Find/Callback.spvm",
        "t/test_files/lib/SPVM/File/Find/Info.pm",
        "t/test_files/lib/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files/lib";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files/lib",
        "t/test_files/lib/SPVM",
        "t/test_files/lib/SPVM/File",
        "t/test_files/lib/SPVM/File/Find",
        "t/test_files/lib/SPVM/File/Find.pm",
        "t/test_files/lib/SPVM/File/Find.spvm",
        "t/test_files/lib/SPVM/File/Find/Callback.pm",
        "t/test_files/lib/SPVM/File/Find/Callback.spvm",
        "t/test_files/lib/SPVM/File/Find/Info.pm",
        "t/test_files/lib/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files/lib";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($cur_name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files/lib",
        "t/test_files/lib/SPVM",
        "t/test_files/lib/SPVM/File",
        "t/test_files/lib/SPVM/File/Find",
        "t/test_files/lib/SPVM/File/Find.pm",
        "t/test_files/lib/SPVM/File/Find.spvm",
        "t/test_files/lib/SPVM/File/Find/Callback.pm",
        "t/test_files/lib/SPVM/File/Find/Callback.spvm",
        "t/test_files/lib/SPVM/File/Find/Info.pm",
        "t/test_files/lib/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files/lib";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files/lib",
        "t/test_files/lib/SPVM",
        "t/test_files/lib/SPVM/File",
        "t/test_files/lib/SPVM/File/Find",
        "t/test_files/lib/SPVM/File/Find.pm",
        "t/test_files/lib/SPVM/File/Find.spvm",
        "t/test_files/lib/SPVM/File/Find/Callback.pm",
        "t/test_files/lib/SPVM/File/Find/Callback.spvm",
        "t/test_files/lib/SPVM/File/Find/Info.pm",
        "t/test_files/lib/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files/lib/";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files/lib",
        "t/test_files/lib/SPVM",
        "t/test_files/lib/SPVM/File",
        "t/test_files/lib/SPVM/File/Find",
        "t/test_files/lib/SPVM/File/Find.pm",
        "t/test_files/lib/SPVM/File/Find.spvm",
        "t/test_files/lib/SPVM/File/Find/Callback.pm",
        "t/test_files/lib/SPVM/File/Find/Callback.spvm",
        "t/test_files/lib/SPVM/File/Find/Info.pm",
        "t/test_files/lib/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $cwd = Cwd->getcwd;
      
      my $dir = "$cwd/t/test_files/lib";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "$dir",
        "$dir/SPVM",
        "$dir/SPVM/File",
        "$dir/SPVM/File/Find",
        "$dir/SPVM/File/Find.pm",
        "$dir/SPVM/File/Find.spvm",
        "$dir/SPVM/File/Find/Callback.pm",
        "$dir/SPVM/File/Find/Callback.spvm",
        "$dir/SPVM/File/Find/Info.pm",
        "$dir/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $cwd = Cwd->getcwd;
      
      my $dir = "$cwd/t/test_files/lib/";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $dir_no_slash = copy $dir;
      Fn->shorten((mutable string)$dir_no_slash, length $dir - 1);
      
      my $files_expected = [
        "$dir_no_slash",
        "$dir_no_slash/SPVM",
        "$dir_no_slash/SPVM/File",
        "$dir_no_slash/SPVM/File/Find",
        "$dir_no_slash/SPVM/File/Find.pm",
        "$dir_no_slash/SPVM/File/Find.spvm",
        "$dir_no_slash/SPVM/File/Find/Callback.pm",
        "$dir_no_slash/SPVM/File/Find/Callback.spvm",
        "$dir_no_slash/SPVM/File/Find/Info.pm",
        "$dir_no_slash/SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      Sys::IO->chdir("t/test_files/lib");
      my $dir = ".";
      
      my $files_list = StringList->new;
      
      File::Find->new({no_chdir => 1})->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        my $cur_name = $info->_;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        ".",
        "./SPVM",
        "./SPVM/File",
        "./SPVM/File/Find",
        "./SPVM/File/Find.pm",
        "./SPVM/File/Find.spvm",
        "./SPVM/File/Find/Callback.pm",
        "./SPVM/File/Find/Callback.spvm",
        "./SPVM/File/Find/Info.pm",
        "./SPVM/File/Find/Info.spvm",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
      Sys::IO->chdir("..");
    }
    
    return 1;
  }
}
