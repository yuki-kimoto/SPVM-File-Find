class TestCase::File::Find {
  use File::Find;
  use StringList;
  use Sort;
  use Array;
  use Sys::IO;
  use Cwd;
  
  static method test : int () {
    
    {
      my $dir = "t/test_files";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files",
        "t/test_files/dir1",
        "t/test_files/dir1/dir1",
        "t/test_files/dir1/dir1/file1.txt",
        "t/test_files/dir1/dir1/file2.txt",
        "t/test_files/dir1/file1.txt",
        "t/test_files/dir1/file2.txt",
        "t/test_files/dir2",
        "t/test_files/dir2/file1.txt",
        "t/test_files/dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files",
        "t/test_files/dir1",
        "t/test_files/dir1/dir1",
        "t/test_files/dir1/dir1/file1.txt",
        "t/test_files/dir1/dir1/file2.txt",
        "t/test_files/dir1/file1.txt",
        "t/test_files/dir1/file2.txt",
        "t/test_files/dir2",
        "t/test_files/dir2/file1.txt",
        "t/test_files/dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $dir = "t/test_files/";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "t/test_files",
        "t/test_files/dir1",
        "t/test_files/dir1/dir1",
        "t/test_files/dir1/dir1/file1.txt",
        "t/test_files/dir1/dir1/file2.txt",
        "t/test_files/dir1/file1.txt",
        "t/test_files/dir1/file2.txt",
        "t/test_files/dir2",
        "t/test_files/dir2/file1.txt",
        "t/test_files/dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $cwd = Cwd->getcwd;
      
      my $dir = "$cwd/t/test_files";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        "$dir",
        "$dir/dir1",
        "$dir/dir1/dir1",
        "$dir/dir1/dir1/file1.txt",
        "$dir/dir1/dir1/file2.txt",
        "$dir/dir1/file1.txt",
        "$dir/dir1/file2.txt",
        "$dir/dir2",
        "$dir/dir2/file1.txt",
        "$dir/dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      my $cwd = Cwd->getcwd;
      
      my $dir = "$cwd/t/test_files/";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $dir_no_slash = copy $dir;
      Fn->shorten((mutable string)$dir_no_slash, length $dir - 1);
      
      my $files_expected = [
        "$dir_no_slash",
        "$dir_no_slash/dir1",
        "$dir_no_slash/dir1/dir1",
        "$dir_no_slash/dir1/dir1/file1.txt",
        "$dir_no_slash/dir1/dir1/file2.txt",
        "$dir_no_slash/dir1/file1.txt",
        "$dir_no_slash/dir1/file2.txt",
        "$dir_no_slash/dir2",
        "$dir_no_slash/dir2/file1.txt",
        "$dir_no_slash/dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
    }
    
    {
      Sys::IO->chdir("t/test_files");
      my $dir = ".";
      
      my $files_list = StringList->new;
      
      File::Find->new->find([has files_list : StringList = $files_list] method : void ($info : File::Find::Info) {
        
        my $dir = $info->dir;
        
        my $name = $info->name;
        
        $self->{files_list}->push($name);
        
      }, $dir);
      
      my $files = $files_list->to_array;
      
      Sort->sort_string_asc($files);
      
      my $files_expected = [
        ".",
        "./dir1",
        "./dir1/dir1",
        "./dir1/dir1/file1.txt",
        "./dir1/dir1/file2.txt",
        "./dir1/file1.txt",
        "./dir1/file2.txt",
        "./dir2",
        "./dir2/file1.txt",
        "./dir2/file2.txt",
      ];
      
      unless (Array->equals_string($files, $files_expected)) {
        warn dump $files;
        return 0;
      }
      Sys::IO->chdir("..");
    }
    
    return 1;
  }
}
