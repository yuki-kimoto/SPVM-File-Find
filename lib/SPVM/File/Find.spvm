# Copyright (c) 2023 Yuki Kimoto
# MIT License

class File::Find {
  version "0.027";
  
  use File::Find::Info;
  use File::Find::Callback;
  
  use StringList;
  use Sys;
  use Regex;
  use Re;
  use File::Basename;
  use Fn;
  use File::Find::Callback;
  use Sys::OS;
  use Re;
  use Hash;
  use File::Spec;
  use Cwd;
  use IO::Dir;
  
  # Fields
  has follow : ro byte;
  
  has warn : ro byte;
  
  # Undocumented Fields
  has SLnkSeen : Hash of Int;
  
  has file_seen_h : Hash of Int;
  
  has current_dir : string;
  
  has skip_pattern : string;
  
  # Class Methods
  static method new : File::Find ($options : object[] = undef) {
    
    my $self = new File::Find;
    
    my $option_names = [
      "follow",
      "warn",
    ];
    
    Fn->check_option_names($options, $option_names);
    
    my $options_h = Hash->new($options);
    
    $self->{follow} = (byte)$options_h->get_or_default_int("follow", 0);
    
    $self->{SLnkSeen} = Hash->new;
    
    $self->{file_seen_h} = Hash->new;
    
    $self->{current_dir} = File::Spec->curdir // ".";
    
    $self->{skip_pattern} = "^\.{1,2}\z";
    
    $self->{warn} = (byte)$options_h->get_or_default_int("warn", 0);
    
    return $self;
  }
  
  # Instance Methods
  method find : void ($cb : File::Find::Callback, $top_dir : string) {
    
    unless ($top_dir) {
      die "The top directory \$top_dir must be defined." ;
    }
    
    my $top_dir_is_dir = 0;
    unless (Sys->d($top_dir)) {
      die "The top directory \$top_dir must be an accessible directory." ;
    }
    
    # canonicalize directory separators
    if (Sys::OS->is_windows) {
      Re->s(my $_ = [$top_dir], ["[/\\\\]", "g"], "/");
      $top_dir = $_->[0];
    }
    
    # no trailing / unless path is root
    unless (&_is_root($top_dir)) {
      Re->s(my $_ = [$top_dir], "/\z", "");
      $top_dir = $_->[0];
    }
    
    my $warn = $self->{warn};
    my $follow = $self->{follow};
    my $file_seen_h = $self->{file_seen_h};
    
    my $tree_queue = StringList->new;
    
    my $base_name = (string)undef;
    
    my $is_top_dir = 1;
    
    my $name = $top_dir;
    
    $tree_queue->push($name);
    
    while (1) {
      
      unless ($tree_queue->length > 0) {
        last;
      }
      
      my $name = $tree_queue->shift;
      
      my $info = File::Find::Info->new;
      $info->{name} = $name;
      
      $cb->($info);
      
      my $dir = $name;
      
      my $lstat = (Sys::IO::Stat)undef;
      
      eval { $lstat = Sys->lstat($dir); }
      
      if ($@) {
        if ($warn) {
          warn "Sys#lstat method failed. File:$dir, Error:$@";
        }
        next;
      }
      
      my $dev = $lstat->st_dev;
      my $ino = $lstat->st_ino;
      
      my $is_dir = 0;
      
      if ($lstat->l) {
        if ($follow) {
          my $stat = (Sys::IO::Stat)undef;
          
          eval { $stat = Sys->stat($dir); }
          
          if ($@) {
            if ($warn) {
              warn "Sys#stat method failed. File:$dir, Error:$@";
            }
            next;
          }
          
          $dev = $stat->st_dev;
          $ino = $stat->st_ino;
          
          if ($stat->d) {
            $is_dir = 1;
          }
        }
      }
      else {
        if ($lstat->d) {
          $is_dir = 1;
        }
      }
      
      unless ($is_dir) {
        next;
      }
      
      if ($follow) {
        my $file_id = "$dev/$ino";
        if ($file_seen_h->exists($file_id)) {
          if ($warn) {
            warn "The directory $dir has already been processed.";
          }
          next;
        }
        else {
          $file_seen_h->set($file_id, 1);
        }
      }
      
      # Get the list of files in the current directory.
      my $dh = (IO::Dir)undef;
      eval { $dh = IO::Dir->new($dir); }
      if ($@) {
        if ($warn) {
          warn "IO::Dir#new method failed. Directory:$dir, Error:$@";
        }
        next;
      }
      
      while (my $dirent = $dh->read) {
        my $base_name = $dirent->d_name;
        
        if (Re->m($base_name, $self->{skip_pattern})) {
          next;
        }
        
        my $name = &_is_root($dir) ? "$dir$base_name" : "$dir/$base_name";
        
        $tree_queue->push($name);
      }
    }
  }
  
  private static method _is_root : int ($path : string) {
    if (Sys::OS->is_windows) {
      return !!Re->m($path, "^(?:[A-Za-z]:)?/\z");
    }
    return $path eq "/";
  }
  
}
